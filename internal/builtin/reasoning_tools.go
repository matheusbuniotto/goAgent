package builtin

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/matheusbuniotto/goagent/pkg/toolkit"
)

// ::: Ferramenta: An√°lise de Racioc√≠nio :::

type AnalyzeReasoningInput struct {
	Problem   string `json:"problem"`
	Approach  string `json:"approach"`
	Confidence int   `json:"confidence"` // 1-10
}

func analyzeReasoning(input json.RawMessage) (string, error) {
	var typedInput AnalyzeReasoningInput
	if err := json.Unmarshal(input, &typedInput); err != nil {
		return "", fmt.Errorf("JSON inv√°lido para argumentos: %w", err)
	}

	if typedInput.Problem == "" {
		return "", fmt.Errorf("argumento inv√°lido. 'problem' √© obrigat√≥rio")
	}

	// An√°lise estruturada do racioc√≠nio
	analysis := fmt.Sprintf(`üß† AN√ÅLISE DE RACIOC√çNIO
‚è∞ Timestamp: %s

üìã PROBLEMA ANALISADO:
%s

üéØ ABORDAGEM PROPOSTA:
%s

üìä CONFIAN√áA: %d/10 %s

üîç VALIDA√á√ÉO AUTOM√ÅTICA:
‚úÖ Problema claramente definido: %s
‚úÖ Abordagem estruturada: %s
‚úÖ N√≠vel de confian√ßa adequado: %s

üí° RECOMENDA√á√ïES:
%s`,
		time.Now().Format("15:04:05"),
		formatText(typedInput.Problem),
		formatText(typedInput.Approach),
		typedInput.Confidence,
		getConfidenceEmoji(typedInput.Confidence),
		boolToCheckmark(len(typedInput.Problem) > 10),
		boolToCheckmark(len(typedInput.Approach) > 20),
		boolToCheckmark(typedInput.Confidence >= 6),
		generateRecommendations(typedInput))

	return analysis, nil
}

func formatText(text string) string {
	if text == "" {
		return "‚ùå N√£o fornecido"
	}
	// Adiciona indenta√ß√£o para melhor formata√ß√£o
	lines := strings.Split(text, "\n")
	var formatted []string
	for _, line := range lines {
		if strings.TrimSpace(line) != "" {
			formatted = append(formatted, "  "+strings.TrimSpace(line))
		}
	}
	return strings.Join(formatted, "\n")
}

func getConfidenceEmoji(confidence int) string {
	switch {
	case confidence >= 9:
		return "üî• (Muito Alta)"
	case confidence >= 7:
		return "‚úÖ (Alta)"
	case confidence >= 5:
		return "‚ö†Ô∏è (M√©dia)"
	case confidence >= 3:
		return "‚ùì (Baixa)"
	default:
		return "‚ùå (Muito Baixa)"
	}
}

func boolToCheckmark(condition bool) string {
	if condition {
		return "‚úÖ Sim"
	}
	return "‚ùå N√£o"
}

func generateRecommendations(input AnalyzeReasoningInput) string {
	var recommendations []string

	if len(input.Problem) < 10 {
		recommendations = append(recommendations, "‚Ä¢ Defina o problema com mais detalhes")
	}

	if len(input.Approach) < 20 {
		recommendations = append(recommendations, "‚Ä¢ Elabore melhor a abordagem proposta")
	}

	if input.Confidence < 6 {
		recommendations = append(recommendations, "‚Ä¢ Considere buscar mais informa√ß√µes antes de prosseguir")
	}

	if input.Confidence > 9 {
		recommendations = append(recommendations, "‚Ä¢ Verifique se n√£o h√° overconfidence - considere poss√≠veis falhas")
	}

	if len(recommendations) == 0 {
		recommendations = append(recommendations, "‚Ä¢ An√°lise est√° bem estruturada, pode prosseguir com confian√ßa")
	}

	return strings.Join(recommendations, "\n")
}

var AnalyzeReasoningDef = toolkit.ToolDefinition{
	Name:        "analyze_reasoning",
	Description: `Analisa e valida o pr√≥prio processo de racioc√≠nio. Use quando quiser verificar se sua abordagem est√° bem fundamentada. Requer JSON com "problem", "approach" e "confidence" (1-10). Exemplo: {"problem": "Preciso implementar X", "approach": "Vou usar Y porque Z", "confidence": 7}`,
	Function:    analyzeReasoning,
}

// ::: Ferramenta: Revis√£o de Decis√£o :::

type ReviewDecisionInput struct {
	Decision    string   `json:"decision"`
	Factors     []string `json:"factors"`
	Alternatives []string `json:"alternatives"`
}

func reviewDecision(input json.RawMessage) (string, error) {
	var typedInput ReviewDecisionInput
	if err := json.Unmarshal(input, &typedInput); err != nil {
		return "", fmt.Errorf("JSON inv√°lido para argumentos: %w", err)
	}

	if typedInput.Decision == "" {
		return "", fmt.Errorf("argumento inv√°lido. 'decision' √© obrigat√≥rio")
	}

	review := fmt.Sprintf(`üéØ REVIS√ÉO DE DECIS√ÉO
‚è∞ Timestamp: %s

üíº DECIS√ÉO:
%s

üìä FATORES CONSIDERADOS:
%s

üîÑ ALTERNATIVAS AVALIADAS:
%s

üîç AN√ÅLISE CR√çTICA:
‚Ä¢ Completude dos fatores: %s
‚Ä¢ Considera√ß√£o de alternativas: %s
‚Ä¢ Clareza da decis√£o: %s

‚≠ê SCORE GERAL: %s`,
		time.Now().Format("15:04:05"),
		formatText(typedInput.Decision),
		formatFactors(typedInput.Factors),
		formatAlternatives(typedInput.Alternatives),
		evaluateCompleteness(typedInput.Factors),
		evaluateAlternatives(typedInput.Alternatives),
		evaluateClarity(typedInput.Decision),
		calculateOverallScore(typedInput))

	return review, nil
}

func formatFactors(factors []string) string {
	if len(factors) == 0 {
		return "‚ùå Nenhum fator especificado"
	}
	var formatted []string
	for i, factor := range factors {
		formatted = append(formatted, fmt.Sprintf("  %d. %s", i+1, factor))
	}
	return strings.Join(formatted, "\n")
}

func formatAlternatives(alternatives []string) string {
	if len(alternatives) == 0 {
		return "‚ùå Nenhuma alternativa considerada"
	}
	var formatted []string
	for i, alt := range alternatives {
		formatted = append(formatted, fmt.Sprintf("  %d. %s", i+1, alt))
	}
	return strings.Join(formatted, "\n")
}

func evaluateCompleteness(factors []string) string {
	count := len(factors)
	switch {
	case count >= 3:
		return "‚úÖ Boa (3+ fatores)"
	case count >= 2:
		return "‚ö†Ô∏è Razo√°vel (2 fatores)"
	case count == 1:
		return "‚ùì Limitada (1 fator)"
	default:
		return "‚ùå Insuficiente (0 fatores)"
	}
}

func evaluateAlternatives(alternatives []string) string {
	count := len(alternatives)
	switch {
	case count >= 2:
		return "‚úÖ Boa (2+ alternativas)"
	case count == 1:
		return "‚ö†Ô∏è Limitada (1 alternativa)"
	default:
		return "‚ùå Insuficiente (0 alternativas)"
	}
}

func evaluateClarity(decision string) string {
	length := len(decision)
	switch {
	case length >= 50:
		return "‚úÖ Clara e detalhada"
	case length >= 20:
		return "‚ö†Ô∏è Razoavelmente clara"
	default:
		return "‚ùå Muito vaga"
	}
}

func calculateOverallScore(input ReviewDecisionInput) string {
	score := 0
	
	// Pontua√ß√£o baseada em fatores
	if len(input.Factors) >= 3 {
		score += 3
	} else if len(input.Factors) >= 2 {
		score += 2
	} else if len(input.Factors) == 1 {
		score += 1
	}
	
	// Pontua√ß√£o baseada em alternativas
	if len(input.Alternatives) >= 2 {
		score += 2
	} else if len(input.Alternatives) == 1 {
		score += 1
	}
	
	// Pontua√ß√£o baseada na clareza
	if len(input.Decision) >= 50 {
		score += 2
	} else if len(input.Decision) >= 20 {
		score += 1
	}
	
	total := score
	maxScore := 7
	
	percentage := (total * 100) / maxScore
	
	switch {
	case percentage >= 85:
		return fmt.Sprintf("üèÜ Excelente (%d/%d - %d%%)", total, maxScore, percentage)
	case percentage >= 70:
		return fmt.Sprintf("‚úÖ Boa (%d/%d - %d%%)", total, maxScore, percentage)
	case percentage >= 50:
		return fmt.Sprintf("‚ö†Ô∏è Razo√°vel (%d/%d - %d%%)", total, maxScore, percentage)
	default:
		return fmt.Sprintf("‚ùå Precisa melhorar (%d/%d - %d%%)", total, maxScore, percentage)
	}
}

var ReviewDecisionDef = toolkit.ToolDefinition{
	Name:        "review_decision",
	Description: `Revisa criticamente uma decis√£o tomada, analisando fatores e alternativas. Use para validar decis√µes importantes. Requer JSON com "decision", "factors" (array) e "alternatives" (array). Exemplo: {"decision": "Vou usar X", "factors": ["performance", "custo"], "alternatives": ["usar Y", "manter Z"]}`,
	Function:    reviewDecision,
}